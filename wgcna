#!/urs/bin/python
#coding:utf-8
'''Usage: python wgcna.py -i in_file -t trait_file -o out_file_path  '''
import argparse
import os
import sys
from os.path import *
parser = argparse.ArgumentParser()
parser.add_argument('-t', action='store',dest='trait_file',
                    help='essential; should be a trait.txt')
parser.add_argument('-i', action='store',dest='in_file',
                    help='essential; the input file')
parser.add_argument('-o', action='store',default = 'None',dest='out_file',
                    help='essential; the output file path')
results = parser.parse_args()
in_file = results.in_file
out_file = results.out_file
trait_file = results.trait_file
print 'in_file = %r' % in_file
print 'out_file = %r' % out_file
print 'trait_file = %r' % trait_file

if isfile(in_file):
	pass
else:
    raise Exception
if out_file == 'None':
    pass
elif isdir(out_file):
    os.chdir('%s' % out_file)
    os.mkdir('wgcna_result')
else:
    print"The -o parameter is required,you shoule give a right directory path"
    raise Exception
f = open('wgcna.r','w')
a = '''
Args <- commandArgs(TRUE)
library(WGCNA);
options(stringsAsFactors = FALSE);
femData = read.table(Args[1], sep="\\t",header=TRUE)
datExpr0 = as.data.frame(t(femData[, -c(1)]));
names(datExpr0) = femData$gene_id;
rownames(datExpr0) = names(femData)[-c(1)];
gsg = goodSamplesGenes(datExpr0, verbose = 3);
gsg$allOK
if (!gsg$allOK)
{
  if (sum(!gsg$goodGenes)>0) 
     printFlush(paste("Removing genes:", paste(names(datExpr0)[!gsg$goodGenes], collapse = ", ")));
  if (sum(!gsg$goodSamples)>0) 
     printFlush(paste("Removing samples:", paste(rownames(datExpr0)[!gsg$goodSamples], collapse = ", ")));
  datExpr0 = datExpr0[gsg$goodSamples, gsg$goodGenes]
}
sampleTree = hclust(dist(datExpr0), method = "average");
pdf(file = "wgcna_result/sampleClustering.pdf", wi = 12, he = 9);
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5, 
     cex.axis = 1.5, cex.main = 2)
dev.off()
abline(h = 15, col = "red");
clust = cutreeStatic(sampleTree, cutHeight = 15, minSize = 10)
datExpr = datExpr0
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)
traitData = read.table(Args[2],sep="\\t",header=TRUE)
allTraits = traitData
femaleSamples = rownames(datExpr);
traitRows = match(femaleSamples, allTraits$Sample);
datTraits = allTraits[traitRows, -1];
rownames(datTraits) = allTraits[traitRows, 1];
collectGarbage();

sampleTree2 = hclust(dist(datExpr), method = "average")
traitColors = numbers2colors(datTraits, signed = FALSE);
plotDendroAndColors(sampleTree2, traitColors,
                    groupLabels = names(datTraits), 
                    main = "Sample dendrogram and trait heatmap")
save(datExpr, datTraits, file = "FemaleLiver-01-dataInput.RData")

lnames = load(file = "wgcna_result/FemaleLiver-01-dataInput.RData");
powers = c(c(1:10), seq(from = 20, to=40, by=2))
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
pdf(file = "wgcna_result/soft threshold_power.pdf", wi = 9, he = 5);     
par(mfrow = c(1,2));
cex1 = 0.9;
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
     main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     labels=powers,cex=cex1,col="red");
abline(h=0.90,col="red")
plot(sft$fitIndices[,1], sft$fitIndices[,5],
     xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
     main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")

net = blockwiseModules(datExpr, power = 6,
                       TOMType = "unsigned", minModuleSize = 30,
                       reassignThreshold = 0, mergeCutHeight = 0.25,
                       numericLabels = TRUE, pamRespectsDendro = FALSE,
                       saveTOMs = TRUE,
                       saveTOMFileBase = "femaleMouseTOM", 
                       verbose = 3)
pdf(file = "DendroAndColors.pdf", wi = 12, he = 9);
mergedColors = labels2colors(net$colors)
plotDendroAndColors(net$dendrograms[[1]], mergedColors[net$blockGenes[[1]]],
                    "Module colors",
                    dendroLabels = FALSE, hang = 0.03,
                    addGuide = TRUE, guideHang = 0.05)
dev.off()
moduleLabels = net$colors
moduleColors = labels2colors(net$colors)
MEs = net$MEs;
geneTree = net$dendrograms[[1]];
save(MEs, moduleLabels, moduleColors, geneTree, 
     file = "FemaleLiver-02-networkConstruction-auto.RData")
dev.off()
write.table(net$colors, file="netcolor.xls", sep="\\t", quote=FALSE)
mcs<-moduleColors[!duplicated(moduleColors)]
for( i in mcs){
    filename=paste("module.",i,".xls",sep="");
    j<-names(datExpr)[moduleColors==i];
    write.table(j,file=filename,sep="\\t",quote=FALSE)
}
lnames = load(file = "FemaleLiver-01-dataInput.RData");
lnames = load(file = "FemaleLiver-02-networkConstruction-auto.RData");
nGenes = ncol(datExpr);
nSamples = nrow(datExpr);
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, datTraits, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples);
textMatrix =  paste(signif(moduleTraitCor, 2), "\n(",
                           signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
pdf(file = "wgcna_result/Module-Relationships-Samples.pdf", wi = 15, he = 10);
par(mar = c(6, 10, 3, 3));
labeledHeatmap(Matrix = moduleTraitCor,
               xLabels = names(datTraits),
               yLabels = names(MEs),
               ySymbols = names(MEs),
               colorLabels = FALSE,
               colors = blueWhiteRed(50),
               textMatrix = textMatrix,
               setStdMargins = FALSE,
               cex.text = 0.8,
               zlim = c(-1,1),
               main = paste("Module-Sample relationships"))
dev.off()
geneModuleMembership = as.data.frame(cor(datExpr, MEs, use = "p"));
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));

names(geneModuleMembership) = paste("MM", modNames, sep="");
names(MMPvalue) = paste("p.MM", modNames, sep="");

geneTraitSignificance = as.data.frame(cor(datExpr, virus_copy, use = "p"));
GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples));

names(geneTraitSignificance) = paste("GS.", names(virus_copy), sep="");
names(GSPvalue) = paste("p.GS.", names(virus_copy), sep="");
module = "brown"
column = match(module, modNames);
moduleGenes = moduleColors==module;

pdf(file = "wgcna_result/Module_membership_vs_gene_significance.pdf", wi = 7, he = 7);
par(mfrow = c(1,1));
verboseScatterplot(abs(geneModuleMembership[moduleGenes, column]),
                   abs(geneTraitSignificance[moduleGenes, 1]),
                   xlab = paste("Module Membership in", module, "module"),
                   ylab = "Gene significance for body virus_copy",
                   main = paste("Module membership vs. gene significance\n"),
                   cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = module)
dev.off()
'''
f.write(a)
f.close()
os.system('Rscript wgcna.r %s %s' % (in_file,trait_file))
os.system('rm wgcna.r')
